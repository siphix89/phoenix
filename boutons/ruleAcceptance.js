// =======================================
//    boutons/ruleAcceptance.js
// =======================================

const { EmbedBuilder } = require('discord.js');

module.exports = {
    // ‚úÖ IMPORTANT: Votre ButtonManager appelle execute(), pas handle()
    async execute(interaction, client) {
        console.log(`üîç [ruleAcceptance] Appel√© pour ${interaction.user.tag}`);
        console.log(`üîç [ruleAcceptance] CustomId: ${interaction.customId}`);

        try {
            // ‚úÖ √âTAPE 1: R√©pondre imm√©diatement (< 3 secondes)
            if (!interaction.deferred && !interaction.replied) {
                await interaction.deferReply({ ephemeral: true });
                console.log(`‚úÖ [ruleAcceptance] Interaction deferred`);
            }

            // ‚úÖ √âTAPE 2: Extraire le roleId
            const roleId = interaction.customId.replace('accept_rules_', '');
            console.log(`üé≠ [ruleAcceptance] RoleId extrait: ${roleId}`);

            // Validation du roleId
            if (!roleId || roleId === interaction.customId) {
                console.error(`‚ùå [ruleAcceptance] Impossible d'extraire le roleId`);
                await interaction.editReply({
                    content: '‚ùå Configuration du bouton invalide. Contactez un administrateur.',
                    ephemeral: true
                });
                return true;
            }

            // ‚úÖ √âTAPE 3: V√©rifier que le r√¥le existe
            const role = interaction.guild.roles.cache.get(roleId);
            if (!role) {
                console.error(`‚ùå [ruleAcceptance] R√¥le ${roleId} introuvable`);
                await interaction.editReply({
                    content: '‚ùå Le r√¥le configur√© est introuvable. Contactez un administrateur.',
                    ephemeral: true
                });
                return true;
            }

            console.log(`‚úÖ [ruleAcceptance] R√¥le trouv√©: ${role.name} (${role.id})`);

            // ‚úÖ √âTAPE 4: V√©rifier si l'utilisateur a d√©j√† le r√¥le
            if (interaction.member.roles.cache.has(roleId)) {
                console.log(`‚ÑπÔ∏è [ruleAcceptance] ${interaction.user.tag} a d√©j√† le r√¥le`);
                await interaction.editReply({
                    content: `‚úÖ Vous avez d√©j√† le r√¥le **${role.name}** !`,
                    ephemeral: true
                });
                return true;
            }

            // ‚úÖ √âTAPE 5: V√©rifier les permissions du bot
            const botMember = interaction.guild.members.me;
            
            if (!botMember.permissions.has('ManageRoles')) {
                console.error(`‚ùå [ruleAcceptance] Bot n'a pas ManageRoles`);
                await interaction.editReply({
                    content: '‚ùå Je n\'ai pas la permission de g√©rer les r√¥les. Contactez un administrateur.',
                    ephemeral: true
                });
                return true;
            }

            // ‚úÖ √âTAPE 6: V√©rifier la hi√©rarchie des r√¥les
            const botHighestRole = botMember.roles.highest;
            console.log(`üîç [ruleAcceptance] R√¥le bot: ${botHighestRole.name} (pos: ${botHighestRole.position})`);
            console.log(`üîç [ruleAcceptance] R√¥le cible: ${role.name} (pos: ${role.position})`);

            if (role.position >= botHighestRole.position) {
                console.error(`‚ùå [ruleAcceptance] Hi√©rarchie: ${role.position} >= ${botHighestRole.position}`);
                await interaction.editReply({
                    content: '‚ùå Je ne peux pas attribuer ce r√¥le car il est trop haut dans la hi√©rarchie.\n' +
                            `Mon r√¥le le plus haut: **${botHighestRole.name}** (position ${botHighestRole.position})\n` +
                            `R√¥le √† attribuer: **${role.name}** (position ${role.position})\n\n` +
                            `‚û°Ô∏è Un administrateur doit d√©placer mon r√¥le au-dessus de **${role.name}**.`,
                    ephemeral: true
                });
                return true;
            }

            // ‚úÖ √âTAPE 7: Attribuer le r√¥le
            console.log(`‚ûï [ruleAcceptance] Attribution du r√¥le ${role.name} √† ${interaction.user.tag}...`);
            
            try {
                await interaction.member.roles.add(role, 'Acceptation du r√®glement');
                console.log(`‚úÖ [ruleAcceptance] R√¥le attribu√© avec succ√®s`);
            } catch (roleError) {
                console.error(`‚ùå [ruleAcceptance] Erreur attribution r√¥le:`, roleError);
                await interaction.editReply({
                    content: `‚ùå Impossible d'attribuer le r√¥le: ${roleError.message}`,
                    ephemeral: true
                });
                return true;
            }

            // ‚úÖ √âTAPE 8: Envoyer la confirmation
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ R√®glement accept√©')
                .setDescription(`F√©licitations **${interaction.user.username}** !\n\nVous avez re√ßu le r√¥le **${role.name}** üéâ`)
                .setColor('Green')
                .addFields({
                    name: 'üéØ Bienvenue !',
                    value: 'Vous avez maintenant acc√®s √† tous les channels du serveur. Amusez-vous bien !',
                    inline: false
                })
                .setThumbnail(interaction.user.displayAvatarURL())
                .setTimestamp()
                .setFooter({ 
                    text: `${interaction.guild.name}`,
                    iconURL: interaction.guild.iconURL() || undefined
                });

            await interaction.editReply({ 
                embeds: [embed],
                ephemeral: true
            });

            console.log(`‚úÖ [ruleAcceptance] Confirmation envoy√©e √† ${interaction.user.tag}`);

            // ‚úÖ √âTAPE 9: Logger l'√©v√©nement
            if (client.logger) {
                client.logger.info(`‚úÖ ${interaction.user.tag} a accept√© le r√®glement et re√ßu le r√¥le ${role.name} sur ${interaction.guild.name}`);
            }

            // Optionnel: Envoyer un message dans un channel de logs
            try {
                // R√©cup√©rer la config du serveur pour le channel de logs
                const guildConfig = await client.db.getGuildConfig(interaction.guild.id);
                
                if (guildConfig && guildConfig.log_channel_id) {
                    const logChannel = interaction.guild.channels.cache.get(guildConfig.log_channel_id);
                    
                    if (logChannel) {
                        const logEmbed = new EmbedBuilder()
                            .setTitle('üìã R√®glement accept√©')
                            .setDescription(`${interaction.user.toString()} a accept√© le r√®glement`)
                            .addFields(
                                { name: 'üë§ Utilisateur', value: `${interaction.user.tag}\n\`${interaction.user.id}\``, inline: true },
                                { name: 'üé≠ R√¥le attribu√©', value: `${role.toString()}\n\`${role.id}\``, inline: true }
                            )
                            .setColor('Green')
                            .setThumbnail(interaction.user.displayAvatarURL())
                            .setTimestamp();

                        await logChannel.send({ embeds: [logEmbed] });
                        console.log(`üìù [ruleAcceptance] Log envoy√© dans ${logChannel.name}`);
                    }
                }
            } catch (logError) {
                console.warn(`‚ö†Ô∏è [ruleAcceptance] Impossible d'envoyer dans les logs:`, logError.message);
            }

            return true;

        } catch (error) {
            console.error(`‚ùå [ruleAcceptance] Erreur g√©n√©rale:`, error);
            console.error(error.stack);
            
            try {
                const errorMsg = {
                    content: `‚ùå Une erreur est survenue: ${error.message}\n\nContactez un administrateur si le probl√®me persiste.`,
                    ephemeral: true
                };

                if (interaction.deferred) {
                    await interaction.editReply(errorMsg);
                } else if (!interaction.replied) {
                    await interaction.reply(errorMsg);
                }
            } catch (replyError) {
                console.error('‚ùå [ruleAcceptance] Impossible de r√©pondre:', replyError.message);
            }

            return true;
        }
    }
};
