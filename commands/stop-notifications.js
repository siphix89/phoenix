const { SlashCommandBuilder, EmbedBuilder, Colors } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('stop-notifications')
    .setDescription('Arr√™ter le syst√®me de notifications Twitch pour tous les serveurs'),

  async execute(interaction, bot) {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({
        content: '‚ùå Permissions administrateur requises',
        ephemeral: true
      });
    }

    await interaction.deferReply({ ephemeral: true });

    try {
      // V√©rifier si les notifications sont actives
      if (!bot.checkInterval) {
        const embed = new EmbedBuilder()
          .setTitle('‚ÑπÔ∏è Notifications d√©j√† arr√™t√©es')
          .setDescription('Le syst√®me de notifications n\'est pas actuellement actif.')
          .setColor(Colors.Blue)
          .addFields(
            {
              name: 'üí° Pour red√©marrer',
              value: 'Utilisez la commande `/start-notifications`',
              inline: false
            }
          )
          .setFooter({ text: 'Aucune action n√©cessaire' })
          .setTimestamp();

        return await interaction.editReply({ embeds: [embed] });
      }

      // Capturer les statistiques avant l'arr√™t
      const stats = await bot.db.getStats();
      const allActiveStreams = await bot.db.getActiveStreams();
      const liveStreamsCount = bot.liveStreamers.size;

      // Arr√™ter le syst√®me
      clearInterval(bot.checkInterval);
      bot.checkInterval = null;
      
      console.log(`‚èπÔ∏è Notifications arr√™t√©es par ${interaction.user.tag} sur ${interaction.guild.name}`);

      // Cr√©er l'embed de confirmation
      const embed = new EmbedBuilder()
        .setTitle('‚èπÔ∏è Notifications arr√™t√©es')
        .setDescription('Le syst√®me de notifications multi-serveurs a √©t√© arr√™t√© avec succ√®s.')
        .setColor(Colors.Orange)
        .addFields(
          { 
            name: 'üìä Statistiques au moment de l\'arr√™t', 
            value: `‚Ä¢ Serveurs: ${stats.guilds}\n‚Ä¢ Streamers surveill√©s: ${stats.streamers}\n‚Ä¢ Total follows: ${stats.totalFollows}`, 
            inline: false 
          },
          { 
            name: 'üî¥ √âtat des streams', 
            value: `‚Ä¢ Streams actifs (DB): ${allActiveStreams.length}\n‚Ä¢ Streams en m√©moire: ${liveStreamsCount}`, 
            inline: false 
          }
        )
        .setFooter({ 
          text: `Arr√™t√© par ${interaction.user.displayName}`,
          iconURL: interaction.user.displayAvatarURL()
        })
        .setTimestamp();

      // Lister les streams actifs si pr√©sents
      if (allActiveStreams.length > 0) {
        const liveList = allActiveStreams
          .slice(0, 5)
          .map(s => `üî¥ **${s.display_name || s.twitch_username}** - ${s.viewer_count || 0} viewers`)
          .join('\n');
        
        embed.addFields({
          name: 'üé¨ Streams qui √©taient surveill√©s',
          value: liveList + (allActiveStreams.length > 5 ? `\n... et ${allActiveStreams.length - 5} autre(s)` : ''),
          inline: false
        });
      }

      // Ajouter les instructions de red√©marrage
      embed.addFields({
        name: 'üí° Pour red√©marrer',
        value: 'Utilisez `/start-notifications` pour r√©activer le syst√®me de notifications.',
        inline: false
      });

      // Avertissement si des streams sont actifs
      if (allActiveStreams.length > 0) {
        embed.addFields({
          name: '‚ö†Ô∏è Important',
          value: `${allActiveStreams.length} streamer(s) actuellement en live ne seront plus surveill√©s.\nLes notifications reprendront apr√®s red√©marrage.`,
          inline: false
        });
      }

      await interaction.editReply({ embeds: [embed] });

      // Enregistrer dans les m√©triques
      if (bot.metrics?.recordCommand) {
        bot.metrics.recordCommand('stop-notifications', interaction.user.id);
      }

    } catch (error) {
      console.error('‚ùå Erreur dans stop-notifications:', error);

      const embed = new EmbedBuilder()
        .setTitle('‚ùå Erreur lors de l\'arr√™t')
        .setDescription('Une erreur est survenue lors de l\'arr√™t des notifications.')
        .setColor(Colors.Red)
        .addFields(
          {
            name: 'üêõ D√©tails de l\'erreur',
            value: `\`\`\`${error.message}\`\`\``,
            inline: false
          },
          {
            name: 'üìã Actions recommand√©es',
            value: '‚Ä¢ V√©rifiez les logs du bot\n‚Ä¢ Tentez de red√©marrer le bot si n√©cessaire\n‚Ä¢ Contactez un d√©veloppeur si le probl√®me persiste',
            inline: false
          }
        )
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      // Enregistrer l'erreur
      if (bot.metrics?.recordError) {
        bot.metrics.recordError();
      }
    }
  }
};