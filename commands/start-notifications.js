const { SlashCommandBuilder, EmbedBuilder, Colors } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('start-notifications')
    .setDescription('D√©marrer le syst√®me de notifications Twitch pour tous les serveurs'),

  async execute(interaction, bot) {
    if (!interaction.member.permissions.has('Administrator')) {
      return interaction.reply({
        content: '‚ùå Permissions administrateur requises',
        ephemeral: true
      });
    }

    await interaction.deferReply({ ephemeral: true });

    try {
      // V√©rifier si les notifications sont d√©j√† actives
      if (bot.checkInterval) {
        const stats = await bot.db.getStats();
        const allActiveStreams = await bot.db.getActiveStreams();

        const embed = new EmbedBuilder()
          .setTitle('‚ÑπÔ∏è Notifications d√©j√† actives')
          .setDescription('Le syst√®me de notifications est d√©j√† en cours d\'ex√©cution.')
          .setColor(Colors.Blue)
          .addFields(
            { 
              name: '‚è±Ô∏è Intervalle', 
              value: `${bot.config.notificationIntervalMinutes || 5} minutes`, 
              inline: true 
            },
            { 
              name: 'üéÆ Streamers surveill√©s', 
              value: `${stats.streamers} unique(s)`, 
              inline: true 
            },
            { 
              name: 'üî¥ Actuellement live', 
              value: `${allActiveStreams.length}`, 
              inline: true 
            },
            {
              name: 'üìä Statistiques globales',
              value: `‚Ä¢ Serveurs: ${stats.guilds}\n‚Ä¢ Total follows: ${stats.totalFollows}\n‚Ä¢ Streams en m√©moire: ${bot.liveStreamers.size}`,
              inline: false
            }
          )
          .setFooter({ text: 'Les notifications fonctionnent normalement' })
          .setTimestamp();

        return await interaction.editReply({ embeds: [embed] });
      }

      // D√©marrer les notifications
      if (typeof bot.startNotifications === 'function') {
        const success = await bot.startNotifications();
        
        if (success) {
          // R√©cup√©rer les statistiques apr√®s d√©marrage
          const stats = await bot.db.getStats();
          const allActiveStreams = await bot.db.getActiveStreams();

          const embed = new EmbedBuilder()
            .setTitle('‚úÖ Notifications activ√©es avec succ√®s !')
            .setDescription('Le syst√®me de notifications multi-serveurs a √©t√© d√©marr√©.')
            .setColor(Colors.Green)
            .addFields(
              { 
                name: '‚è±Ô∏è Intervalle de v√©rification', 
                value: `${bot.config.notificationIntervalMinutes || 5} minutes`, 
                inline: true 
              },
              { 
                name: 'üéÆ Streamers surveill√©s', 
                value: `${stats.streamers} unique(s)`, 
                inline: true 
              },
              { 
                name: 'üî¥ Streams actifs', 
                value: `${allActiveStreams.length}`, 
                inline: true 
              },
              {
                name: 'üìä Configuration',
                value: `‚Ä¢ Serveurs Discord: ${stats.guilds}\n‚Ä¢ Total de follows: ${stats.totalFollows}\n‚Ä¢ Twitch API: ${bot.twitch?.accessToken ? '‚úÖ Connect√©' : '‚ùå D√©connect√©'}`,
                inline: false
              },
              {
                name: 'üìÖ Prochaine v√©rification',
                value: `Dans ${bot.config.notificationIntervalMinutes || 5} minute(s)`,
                inline: false
              }
            )
            .setFooter({ 
              text: `D√©marr√© par ${interaction.user.displayName}`,
              iconURL: interaction.user.displayAvatarURL()
            })
            .setTimestamp();

          // Ajouter la liste des streams actifs si pr√©sents
          if (allActiveStreams.length > 0) {
            const liveList = allActiveStreams
              .slice(0, 5)
              .map(s => `üî¥ **${s.display_name || s.twitch_username}** - ${s.viewer_count || 0} viewers`)
              .join('\n');
            
            embed.addFields({
              name: 'üé¨ Actuellement en live',
              value: liveList + (allActiveStreams.length > 5 ? `\n... et ${allActiveStreams.length - 5} autre(s)` : ''),
              inline: false
            });
          }

          await interaction.editReply({ embeds: [embed] });

          // Log pour tra√ßabilit√©
          console.log(`‚úÖ Notifications d√©marr√©es manuellement par ${interaction.user.tag} sur ${interaction.guild.name}`);

        } else {
          // √âchec du d√©marrage
          const embed = new EmbedBuilder()
            .setTitle('‚ùå √âchec de l\'activation')
            .setDescription('Impossible de d√©marrer les notifications. V√©rifiez la configuration.')
            .setColor(Colors.Red)
            .addFields(
              {
                name: 'üîç V√©rifications',
                value: '‚Ä¢ Configuration Twitch compl√®te ?\n‚Ä¢ TwitchManager initialis√© ?\n‚Ä¢ Credentials valides ?',
                inline: false
              },
              {
                name: 'üìã Commandes utiles',
                value: '‚Ä¢ `/debug-notifications` - Diagnostic complet\n‚Ä¢ V√©rifiez les logs du bot',
                inline: false
              }
            )
            .setTimestamp();

          await interaction.editReply({ embeds: [embed] });
        }

      } else {
        // Fallback: m√©thode directe
        console.log('‚ö†Ô∏è M√©thode startNotifications() non trouv√©e, utilisation du fallback');
        
        bot.startStreamChecking();
        
        const embed = new EmbedBuilder()
          .setTitle('üîÑ D√©marrage en cours')
          .setDescription('Tentative de d√©marrage des notifications via m√©thode alternative.')
          .setColor(Colors.Orange)
          .addFields(
            {
              name: '‚ö†Ô∏è Avertissement',
              value: 'La m√©thode standard n\'est pas disponible. Les notifications ont √©t√© d√©marr√©es via fallback.',
              inline: false
            },
            {
              name: 'üìã Action recommand√©e',
              value: 'V√©rifiez que le bot est correctement initialis√©.',
              inline: false
            }
          )
          .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
      }

    } catch (error) {
      console.error('‚ùå Erreur dans start-notifications:', error);

      const embed = new EmbedBuilder()
        .setTitle('‚ùå Erreur de d√©marrage')
        .setDescription('Une erreur est survenue lors du d√©marrage des notifications.')
        .setColor(Colors.Red)
        .addFields(
          {
            name: 'üêõ Erreur',
            value: `\`\`\`${error.message}\`\`\``,
            inline: false
          },
          {
            name: 'üìã Actions recommand√©es',
            value: '1. V√©rifiez la configuration Twitch dans `.env`\n2. Utilisez `/debug-notifications` pour diagnostiquer\n3. Consultez les logs du bot',
            inline: false
          }
        )
        .setFooter({ text: 'Contactez un administrateur si le probl√®me persiste' })
        .setTimestamp();

      await interaction.editReply({ embeds: [embed] });

      // Enregistrer l'erreur
      if (bot.metrics?.recordError) {
        bot.metrics.recordError();
      }
    }
  }
};