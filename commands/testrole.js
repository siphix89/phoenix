const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('testrole')
        .setDescription('üß™ Teste l\'attribution automatique du r√¥le')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('Utilisateur √† tester (d√©faut: vous)')
                .setRequired(false)
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction, client) {
        await interaction.deferReply({ ephemeral: true });

        const testUser = interaction.options.getUser('user') || interaction.user;
        const testMember = await interaction.guild.members.fetch(testUser.id);

        console.log(`üß™ [testrole] Test pour ${testUser.tag}`);

        const diagnosticEmbed = new EmbedBuilder()
            .setTitle('üîç Diagnostic du syst√®me de r√¥le automatique')
            .setColor('Blue');

        const results = [];

        // ‚úÖ √âTAPE 1: V√©rifier la configuration
        if (!client.config.autoRoleId || client.config.autoRoleId === '') {
            results.push('‚ùå **AUTO_ROLE_ID non configur√©**');
            results.push('   Ajoutez dans .env: `AUTO_ROLE_ID=123456789`');
        } else {
            results.push(`‚úÖ **AUTO_ROLE_ID configur√©:** \`${client.config.autoRoleId}\``);

            // ‚úÖ √âTAPE 2: V√©rifier que le r√¥le existe
            const role = interaction.guild.roles.cache.get(client.config.autoRoleId);
            if (!role) {
                results.push(`‚ùå **R√¥le introuvable:** ID \`${client.config.autoRoleId}\``);
                results.push(`   Le r√¥le n'existe pas dans ce serveur`);
            } else {
                results.push(`‚úÖ **R√¥le trouv√©:** ${role.toString()} (${role.name})`);

                // ‚úÖ √âTAPE 3: V√©rifier si l'utilisateur a d√©j√† le r√¥le
                if (testMember.roles.cache.has(client.config.autoRoleId)) {
                    results.push(`‚ÑπÔ∏è **${testUser.username} a d√©j√† ce r√¥le**`);
                } else {
                    results.push(`‚úÖ **${testUser.username} n'a pas encore le r√¥le**`);
                }

                // ‚úÖ √âTAPE 4: V√©rifier les permissions du bot
                const botMember = interaction.guild.members.me;
                if (!botMember.permissions.has('ManageRoles')) {
                    results.push('‚ùå **Permission manquante:** Manage Roles');
                    results.push('   Le bot doit avoir la permission "G√©rer les r√¥les"');
                } else {
                    results.push('‚úÖ **Permission:** Bot a "Manage Roles"');

                    // ‚úÖ √âTAPE 5: V√©rifier la hi√©rarchie
                    const botHighestRole = botMember.roles.highest;
                    results.push(`\nüìä **Hi√©rarchie des r√¥les:**`);
                    results.push(`   ‚Ä¢ R√¥le du bot: **${botHighestRole.name}** (position: ${botHighestRole.position})`);
                    results.push(`   ‚Ä¢ R√¥le cible: **${role.name}** (position: ${role.position})`);

                    if (role.position >= botHighestRole.position) {
                        results.push('‚ùå **Probl√®me de hi√©rarchie!**');
                        results.push(`   Le r√¥le "${role.name}" est trop haut`);
                        results.push(`   Solution: D√©placez le r√¥le du bot au-dessus de "${role.name}"`);
                    } else {
                        results.push('‚úÖ **Hi√©rarchie correcte**');

                        // ‚úÖ √âTAPE 6: Tester l'attribution
                        if (!testMember.roles.cache.has(client.config.autoRoleId)) {
                            try {
                                results.push(`\nüß™ **Test d'attribution...**`);
                                await testMember.roles.add(role, 'Test du syst√®me de r√¥le automatique');
                                results.push(`‚úÖ **R√¥le attribu√© avec succ√®s!**`);
                                results.push(`   ${testUser.toString()} a maintenant le r√¥le ${role.toString()}`);
                            } catch (testError) {
                                results.push(`‚ùå **√âchec du test:** ${testError.message}`);
                            }
                        }
                    }
                }
            }
        }

        // ‚úÖ √âTAPE 7: V√©rifier "Server Members Intent"
        results.push(`\nüîî **Intention Discord:**`);
        results.push(`Pour que le syst√®me fonctionne automatiquement:`);
        results.push(`1. Aller sur discord.com/developers/applications`);
        results.push(`2. S√©lectionner votre bot`);
        results.push(`3. Bot ‚Üí Privileged Gateway Intents`);
        results.push(`4. Activer "Server Members Intent"`);

        diagnosticEmbed.setDescription(results.join('\n'));

        // R√©sum√© final
        const hasConfig = client.config.autoRoleId && client.config.autoRoleId !== '';
        const role = interaction.guild.roles.cache.get(client.config.autoRoleId);
        const hasPermission = interaction.guild.members.me.permissions.has('ManageRoles');
        const hierarchyOk = role ? (role.position < interaction.guild.members.me.roles.highest.position) : false;

        const allGood = hasConfig && role && hasPermission && hierarchyOk;

        if (allGood) {
            diagnosticEmbed.setColor('Green');
            diagnosticEmbed.setFooter({ text: '‚úÖ Le syst√®me de r√¥le automatique est op√©rationnel' });
        } else {
            diagnosticEmbed.setColor('Red');
            diagnosticEmbed.setFooter({ text: '‚ùå Des probl√®mes ont √©t√© d√©tect√©s - Suivez les instructions ci-dessus' });
        }

        await interaction.editReply({ embeds: [diagnosticEmbed] });

        if (client.logger) {
            client.logger.info(`üß™ [testrole] Test effectu√© par ${interaction.user.tag}`);
        }
    }
};