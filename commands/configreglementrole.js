const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('config-reglement-role')
        .setDescription('Configurer le r√¥le du r√®glement (Admin)')
        .addRoleOption(option =>
            option.setName('role')
                .setDescription('R√¥le √† configurer')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction, client) {
        // V√©rification des permissions admin
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            return await interaction.reply({
                content: '‚ùå Seuls les administrateurs peuvent utiliser cette commande!',
                ephemeral: true
            });
        }

        const role = interaction.options.getRole('role');

        if (role) {
            // V√©rifier les permissions
            const botMember = interaction.guild.members.cache.get(client.user.id);
            if (!botMember.permissions.has(PermissionFlagsBits.ManageRoles) || 
                role.position >= botMember.roles.highest.position) {
                
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå R√¥le non assignable')
                    .setDescription(`Le bot ne peut pas accorder le r√¥le **${role.name}**`)
                    .setColor('Red')
                    .addFields({
                        name: 'üîß Solutions',
                        value: '‚Ä¢ Placez le r√¥le du bot au-dessus du r√¥le cible\n‚Ä¢ V√©rifiez que le bot a la permission \'G√©rer les r√¥les\'\n‚Ä¢ Choisissez un r√¥le plus bas dans la hi√©rarchie',
                        inline: false
                    });

                return await interaction.reply({ embeds: [embed], ephemeral: true });
            }

            // Mettre √† jour les variables d'environnement en m√©moire
            process.env.RULES_ROLE_ID = role.id;
            process.env.RULES_ROLE_NAME = role.name;

            const embed = new EmbedBuilder()
                .setTitle('‚úÖ Configuration mise √† jour')
                .setDescription(`R√¥le du r√®glement configur√©: ${role}`)
                .setColor('Green')
                .addFields(
                    {
                        name: 'üí° Note',
                        value: 'Pour rendre cette configuration permanente, mettez √† jour `RULES_ROLE_ID` dans votre fichier .env',
                        inline: false
                    },
                    {
                        name: 'üîÑ Prochaine √©tape',
                        value: 'Utilisez `/reglement-dashboard` pour cr√©er/mettre √† jour le dashboard avec le bouton',
                        inline: false
                    }
                );

            await interaction.reply({ embeds: [embed] });
            client.logger?.info(`‚úÖ R√¥le de r√®glement configur√© sur ${role.name} par ${interaction.user.username}`);

        } else {
            // Afficher la configuration actuelle
            const currentRole = process.env.RULES_ROLE_ID && process.env.RULES_ROLE_ID !== '0' ? 
                interaction.guild.roles.cache.get(process.env.RULES_ROLE_ID) : null;

            const embed = new EmbedBuilder()
                .setTitle('‚öôÔ∏è Configuration du r√¥le de r√®glement')
                .setColor('Blue');

            if (currentRole) {
                embed.addFields({
                    name: 'üéØ R√¥le actuel',
                    value: `${currentRole} (\`${currentRole.id}\`)`,
                    inline: false
                });

                // V√©rifier si le r√¥le est toujours assignable
                const botMember = interaction.guild.members.cache.get(client.user.id);
                if (botMember.permissions.has(PermissionFlagsBits.ManageRoles) && 
                    currentRole.position < botMember.roles.highest.position) {
                    embed.addFields({ name: '‚úÖ Status', value: 'R√¥le assignable', inline: true });
                } else {
                    embed.addFields({ name: '‚ö†Ô∏è Status', value: 'R√¥le non assignable', inline: true });
                }
            } else {
                embed.addFields({
                    name: '‚ö†Ô∏è Aucun r√¥le configur√©',
                    value: 'Utilisez `/config-reglement-role @role` pour configurer',
                    inline: false
                });
            }

            embed.addFields({
                name: 'üîß Utilisation',
                value: '‚Ä¢ `/config-reglement-role @role` - D√©finir le r√¥le\n‚Ä¢ `/reglement-dashboard` - Cr√©er le dashboard\n‚Ä¢ `/config-reglement-role` - Voir la config actuelle',
                inline: false
            });

            await interaction.reply({ embeds: [embed], ephemeral: true });
        }
    }
};